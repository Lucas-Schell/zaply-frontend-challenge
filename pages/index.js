import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Product from '../components/ProductCard';
import SearchBar from '../components/SearchBar';
import { useState } from 'react';
import Modal from '../components/Modal';
import { MongoClient } from 'mongodb';
import Button from '../components/Button';

function Home(props) {
  const { data, categories } = props;
  const [products, setProducts] = useState(data);
  const [isOpen, setIsOpen] = useState(false);
  const [isCreate, setIsCreate] = useState(false);
  const [modalData, setModalData] = useState({});
  const [resultRequest, setResultRequest] = useState('');

  const fetchData = (qSearch, qCateg, qSort, qOrder) => {
    const querySearch = qSearch ? `search=${qSearch}` : '';
    const queryCategories = qCateg ? `categories=${qCateg}` : '';
    const querySort = qSort ? `sort=${qSort}` : '';
    const queryOrder = qOrder ? `order=${qOrder}` : '';
    fetch(`/api?${querySearch}&${queryCategories}&${querySort}&${queryOrder}`).then(data => data.json()).then(data => {
      setProducts(data.data)
    });
  }

  const openEdit = (productData) => {
    setIsOpen(true)
    setModalData(productData)
  }

  const closeEdit = () => {
    setResultRequest('')
    setIsCreate(false)
    setIsOpen(false)
  }

  const onEditSubmit = (productData) => {
    fetch(`/api/${productData.productId}`, {
      headers: {
        'Content-Type': 'application/json'
      },
      method: 'PUT',
      body: JSON.stringify(productData)
    }).then(data => data.json()).then(data => {
      if (data.success) {
        setResultRequest('Produto atualizado com sucesso!');
        setProducts(prevState => prevState.map(product => {
          if (product.productId === data.data.productId) {
            return data.data
          }
          return product
        }))
      } else {
        setResultRequest('O produto não foi atualizado!');
      }
    });
  }

  const onDeleteSubmit = (id) => {
    fetch(`/api/${id}`, {
      headers: {
        'Content-Type': 'application/json'
      },
      method: 'DELETE'
    }).then(data => data.json()).then(data => {
      console.log(data)
      if (data.success) {
        setResultRequest('Produto excluído com sucesso!');
        setProducts(prevState => prevState.filter(product => (product.productId !== data.data.productId)))
      } else {
        setResultRequest('O produto não foi excluído!');
      }
    });
  }

  const onCreateSubmit = (productData) => {
    fetch('/api/', {
      headers: {
        'Content-Type': 'application/json'
      },
      method: 'POST',
      body: JSON.stringify(productData)
    }).then(data => data.json()).then(data => {
      if (data.success) {
        setResultRequest('Produto criado com sucesso!');
        setProducts(prevState => [...prevState, data.data])
      } else {
        setResultRequest('O produto não foi criado!');
      }
    });
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <main className={styles.main}>
        {isOpen &&
        <Modal
          isOpen={isOpen}
          {...modalData}
          closeModal={closeEdit}
          onSubmit={onEditSubmit}
          onDelete={onDeleteSubmit}
          resultRequest={resultRequest}
          onCreate={onCreateSubmit}
          isCreate={isCreate}
        />}
        <div>
          <SearchBar onSearchHandler={fetchData} categories={categories}/>
        </div>
        <div className={styles.buttonContainer}>
          <Button type={'button'} onClick={() => {
            setIsCreate(true)
            setIsOpen(true)
          }}>
            Adicionar
          </Button>
        </div>
        <div className={styles.grid}>
          {products?.map(product => {
            return (
              <div key={product.productId} className={styles.productContainer}>
                <Product
                  productId={product.productId}
                  image={product.image}
                  name={product.name}
                  categories={product.categories}
                  price={product.price}
                  brand={product.brand}
                  onClick={openEdit}
                />
              </div>
            )
          })}
        </div>
      </main>
    </div>
  )
}

export async function getStaticProps() {
  const client = await MongoClient.connect(process.env.MONGO_URI)

  const db = client.db();

  const productsCollection = db.collection('products');

  const data = await productsCollection.find().toArray();

  await client.close();

  const categories = []
  data.forEach(item => {
    if (!categories.includes(item.categories)) {
      categories.push(item.categories)
    }
  })

  return {
    props: {
      data: data.map((product) => ({
        productId: product.productId,
        image: product.image,
        name: product.name,
        categories: product.categories,
        price: product.price,
        brand: product.brand
      })),
      categories
    },
    revalidate: 10
  };
}

export default Home
